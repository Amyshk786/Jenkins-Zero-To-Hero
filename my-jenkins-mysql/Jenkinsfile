pipeline {
  agent none
  tools { maven 'Maven 3.8.1' }

  stages {
    stage('Back-end') {
      agent {
        docker { image 'maven:3.8.1-adoptopenjdk-11'; args '-v $HOME/.m2:/root/.m2' }
      }
      steps {
        sh 'mvn clean package -DskipTests'
      }
    }

    stage('Run Tests with MySQL') {
      agent { label 'docker' }
      steps {
        script {
          docker.image('mysql:8.0').withRun('-e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=appdb') { mysql ->
            def dbHost = mysql.id
            docker.image('maven:3.8.1-adoptopenjdk-11').inside("--link ${mysql.id}:db") {
              sh 'while ! mysqladmin ping -hdb --silent; do sleep 1; done'
              echo "DB is online"

              sh '''
                mvn test \
                  -Dspring.datasource.url=jdbc:mysql://db:3306/appdb \
                  -Dspring.datasource.username=root \
                  -Dspring.datasource.password=root
              '''
            }
          }
        }
      }
    }

    stage('Build Docker Image') {
      agent {
        docker { image 'docker:stable-dind'; args '--privileged -v /var/run/docker.sock:/var/run/docker.sock' }
      }
      steps {
        sh 'docker build -t your-app:latest .'
      }
    }

    stage('Deploy') {
      agent {
        docker { image 'docker:stable-dind'; args '--privileged -v /var/run/docker.sock:/var/run/docker.sock' }
      }
      steps {
        sh '''
          docker stop your-app-container || true
          docker rm your-app-container || true
          docker run -d --name your-app-container \
            --link your-mysql:db \
            -p 8080:8080 your-app:latest
        '''
      }
    }
  }

  post {
    always {
      echo 'Cleaning up...'
      sh 'docker system prune -f'
    }
  }
}
